import fs from 'fs';
import path from 'path';

const LIPS_DIR = path.join(process.cwd(), 'docs', 'lips');
const GEN_DIR = path.join(process.cwd(), '.rspress');
const SIDEBAR_OUTPUT_PATH = path.join(GEN_DIR, 'lips-sidebar.ts');
const INDEX_OUTPUT_PATH = path.join(LIPS_DIR, 'index.md');

// --- Helper Functions ---

function parseLipHeader(content) {
  const header = {};
  const lines = content.split('\n').slice(0, 40);
  for (const line of lines) {
    if (line.startsWith('* **')) {
      const match = line.match(/\*\s\*\*(.*?):\s(.*?)\*\*$/);
      if (match) {
        const key = match[1].trim().toLowerCase();
        const value = match[2].trim();
        header[key] = value;
      }
    } else if (line.trim() === '## Abstract') {
      break;
    }
  }
  return header;
}

// --- Main Logic ---

console.log('Starting LIPs information generation...');

if (!fs.existsSync(GEN_DIR)) {
  fs.mkdirSync(GEN_DIR, { recursive: true });
}

const lipFiles = fs.readdirSync(LIPS_DIR).filter(file => file.startsWith('LIP-') && file.endsWith('.md'));

const lipsData = lipFiles.map(file => {
  const content = fs.readFileSync(path.join(LIPS_DIR, file), 'utf-8');
  const header = parseLipHeader(content);
  return {
    filename: file,
    number: parseInt(header.lip, 10),
    title: header.title,
    layer: header.layer,
    status: header.status,
  };
}).filter(data => !isNaN(data.number) && data.title && data.layer && data.status);

// --- Sorting and Filtering ---

const statusOrder = {
  'Active / Final': 1,
  'Approved / Accepted': 2,
  'Proposed': 3,
  'Draft': 4,
  'Idea': 5,
};

const activeLips = lipsData
  .filter(lip => Object.keys(statusOrder).includes(lip.status))
  .sort((a, b) => {
    const statusDiff = (statusOrder[a.status] || 99) - (statusOrder[b.status] || 99);
    if (statusDiff !== 0) {
      return statusDiff;
    }
    return a.number - b.number;
  });

// --- Sidebar Generation ---

const layers = {};
activeLips.forEach(lip => {
  if (!layers[lip.layer]) {
    layers[lip.layer] = [];
  }
  layers[lip.layer].push(lip);
});

const sidebarItems = Object.entries(layers).map(([layer, lips]) => {
  if (lips.length === 0) {
    return null;
  }
  return {
    text: layer,
    collapsible: true,
    collapsed: false,
    items: lips.map(lip => {
      const title = `LIP-${String(lip.number).padStart(4, '0')}: ${lip.title}`;
      return {
        text: title,
        link: `/lips/${lip.filename.replace('.md', '')}`,
      };
    }),
  };
}).filter(Boolean);

const sidebarContent = `// This file is auto-generated by scripts/generate-lips-info.mjs\n// Do not edit this file directly.\n\nexport const lipsSidebar = [\n  {\n    text: 'LIPs Index',\n    link: '/lips/'\n  },\n  ...${JSON.stringify(sidebarItems, null, 2)}\n];\n`;

fs.writeFileSync(SIDEBAR_OUTPUT_PATH, sidebarContent);
console.log(`[SUCCESS] Generated sidebar at ${SIDEBAR_OUTPUT_PATH}`);

// --- Index Page Generation ---

const indexActiveLips = lipsData.filter(lip => ['Active / Final', 'Approved / Accepted', 'Proposed', 'Draft'].includes(lip.status));

let indexContent = `# LEA Improvement Proposals (LIPs) Index\n\n`;
indexContent += `This page provides an overview of the current and active LEA Improvement Proposals.\n\n`;
indexContent += `| Number | Title | Layer | Status |\n`;
indexContent += `| :--- | :---- | :---- | :--- |\n`;

indexActiveLips.forEach(lip => {
  const link = `./${lip.filename.replace('.md', '')}`;
  indexContent += `| [LIP-${String(lip.number).padStart(4, '0')}](${link}) | ${lip.title} | ${lip.layer} | ${lip.status} |\n`;
});

fs.writeFileSync(INDEX_OUTPUT_PATH, indexContent);
console.log(`[SUCCESS] Generated index page at ${INDEX_OUTPUT_PATH}`);

console.log('LIPs information generation complete.');

