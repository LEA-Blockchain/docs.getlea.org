"use strict";(self.webpackChunkrspress=self.webpackChunkrspress||[]).push([["268"],{5714:function(e,n,i){i.r(n),i.d(n,{default:()=>l});var s=i(5893),t=i(65);function r(e){let n=Object.assign({ul:"ul",li:"li",strong:"strong",h2:"h2",a:"a",p:"p",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",code:"code",pre:"pre",h4:"h4",em:"em"},(0,t.ah)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"LIP: 10"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Layer: Application"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Title: LEA Transaction Manifest (LTM)"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Author: Allwin Ketnawang"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Created: 2025-07-15"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Requires: 7"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.strong,{children:"Status: Proposed"})}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"abstract",children:["Abstract",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#abstract",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"This LIP proposes the LEA Transaction Manifest (LTM), a standardized, declarative JSON format for defining LEA transactions. The LTM schema is designed to abstract away the complexities of binary serialization, allowing developers and users to define complex transactions in a human-readable and reusable manner. It provides a robust system for sourcing data dynamically from the local file system, external commands, and other data structures. The primary goal of LTM is to make transaction creation simpler, safer, and more transparent, separating the definition of a transaction's data from the logic of its binary encoding."}),"\n",(0,s.jsxs)(n.h2,{id:"motivation",children:["Motivation",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#motivation",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The process of creating a valid LEA transaction, as defined in LIP-7, requires precise binary encoding using the Simple Compact Transaction Protocol (SCTP). Constructing this binary stream programmatically is a low-level task that is verbose, error-prone, and requires custom scripting for each new type of transaction. This approach tightly couples the transaction's data with the application logic, making it difficult to manage, reuse, or audit transaction definitions."}),"\n",(0,s.jsx)(n.p,{children:"The LEA Transaction Manifest (LTM) introduces a declarative layer that solves this problem. By defining a transaction in a structured JSON format, users can clearly specify all its components (such as signers, gas parameters, and contract invocations) without writing any encoding logic. The LTM format is designed to be processed by a build tool that handles all the underlying complexities of data resolution, SCTP encoding, hashing, and signing. This separation of concerns dramatically simplifies the user experience, reduces the risk of malformed transactions, and promotes the creation of reusable transaction templates."}),"\n",(0,s.jsxs)(n.h2,{id:"specification",children:["Specification",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#specification",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"A LEA Transaction Manifest is a JSON file that adheres to the following structure. The file must be parsed by a tool that can safely handle large integers to prevent precision loss."}),"\n",(0,s.jsxs)(n.h3,{id:"1-top-level-structure",children:["1. Top-Level Structure",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-top-level-structure",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The LTM is a single JSON object with the following root fields:"}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{align:"left",children:"Field"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Type"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Required"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"sequence"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Number or String"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Yes"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"The sequence number (nonce) for the fee-paying signer."}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"feePayer"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"String"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Yes"}),"\n",(0,s.jsxs)(n.td,{align:"left",children:["The name of the signer who will pay the transaction fees. Must match a key in the ",(0,s.jsx)(n.code,{children:"signers"})," object."]}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"gasLimit"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Number or String"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Yes"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"The maximum gas units the transaction can consume."}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"gasPrice"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Number or String"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Yes"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"The price per gas unit."}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"outputFile"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"String"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"No"}),"\n",(0,s.jsxs)(n.td,{align:"left",children:["The file path where the final binary transaction will be written. If omitted when using the CLI, the binary output is written to ",(0,s.jsx)(n.code,{children:"stdout"}),". This field is ignored when used as a module."]}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"constants"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Object"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"No"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"An object defining reusable values that can be referenced elsewhere in the manifest."}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"signers"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Object"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Yes"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"An object defining the one or more signers for the transaction."}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"invocations"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Array"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Yes"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"An array of one or more invocation objects."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"2-signers-object",children:["2. ",(0,s.jsx)(n.code,{children:"signers"})," Object",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-signers-object",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"signers"})," object contains one or more key-value pairs, where each key is a unique, user-defined name for the signer. This name is used to reference the signer in the ",(0,s.jsx)(n.code,{children:"feePayer"})," field or in ",(0,s.jsx)(n.code,{children:"$signer"})," placeholders."]}),"\n",(0,s.jsxs)(n.p,{children:["The value associated with each signer name ",(0,s.jsx)(n.strong,{children:"MUST"})," be a string that uses a placeholder to dynamically load a keyset, or, when used as a module, a direct JavaScript array. The loaded keyset ",(0,s.jsx)(n.strong,{children:"MUST"})," conform to the format defined in ",(0,s.jsx)(n.strong,{children:"LIP-12: LEA Keyset File Format"}),"."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"signers": {\n  "main": "$file(./main-keyset.json)",\n  "secondary": "$json(./all-my-secrets.json#wallets.secondary)",\n  "ephemeral": "$exec(./generate-temporary-keys.sh)"\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"When used programmatically as a module, a direct array can be provided:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"const myKeyset = [\n  [ 1, 2, 3, ... ], // Ed25519 sk\n  [ [ 101, 102, ... ], [ 201, 202, ... ] ] // SPHINCS+ sk, pk\n];\n\nconst ltmObject = {\n  // ...\n  signers: {\n    main: myKeyset\n  }\n  // ...\n};\n"})}),"\n",(0,s.jsxs)(n.h3,{id:"3-constants-object",children:["3. ",(0,s.jsx)(n.code,{children:"constants"})," Object",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#3-constants-object",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["This optional top-level object allows you to define key-value pairs for reusable values. These constants can be referenced in other parts of the manifest using the ",(0,s.jsx)(n.code,{children:"$const()"})," placeholder. This is useful for reducing repetition and improving maintainability."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"constants": {\n  "tokenProgram": "a1b2c3d4e5f6...",\n  "USER_REGISTRATION_ID": 5\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"4-invocations-array",children:["4. ",(0,s.jsx)(n.code,{children:"invocations"})," Array",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#4-invocations-array",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:"invocations"})," array contains one or more objects, each representing a single call to a smart contract."]}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{align:"left",children:"Field"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Type"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Required"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"targetAddress"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"String"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Yes"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"The 32-byte hex address of the target contract. Can be a literal or use a placeholder."}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"instructions"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Array"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Yes"}),"\n",(0,s.jsx)(n.td,{align:"left",children:"An array defining the instruction payload to be sent to the target."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"5-instructions-array",children:["5. ",(0,s.jsx)(n.code,{children:"instructions"})," Array",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#5-instructions-array",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["This array defines the sequence of data fields that constitute the instruction payload. Each element in the array is an object with a ",(0,s.jsx)(n.strong,{children:"single key"}),", where the key is the SCTP type (e.g., ",(0,s.jsx)(n.code,{children:"vector"}),", ",(0,s.jsx)(n.code,{children:"uleb"}),") and the value is the data to be encoded."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'"instructions": [\n  { "uleb": "$const(USER_REGISTRATION_ID)" },\n  { "vector": "$signer(mainAccount.ed25519Pk)" },\n  { "uint64": "18446744073709551615" }\n]\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"6-placeholder-syntax-for-dynamic-data",children:["6. Placeholder Syntax for Dynamic Data",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#6-placeholder-syntax-for-dynamic-data",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["To enable dynamic data sourcing, LTM values can use a function-like placeholder syntax: ",(0,s.jsx)(n.code,{children:"$<source>(<value>)"}),". A build tool must resolve these placeholders before encoding the transaction."]}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{align:"left",children:"Placeholder Syntax"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Example"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"$const(<key>)"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:'"$const(tokenProgram)"'})}),"\n",(0,s.jsxs)(n.td,{align:"left",children:["Retrieves a value from the ",(0,s.jsx)(n.code,{children:"constants"})," object."]}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"$signer(<name>.<key>)"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:'"$signer(mainAccount.address)"'})}),"\n",(0,s.jsxs)(n.td,{align:"left",children:["Retrieves a derived value from a named signer. Valid keys are ",(0,s.jsx)(n.code,{children:"ed25519Pk"}),", ",(0,s.jsx)(n.code,{children:"sphincsPk"}),", and ",(0,s.jsx)(n.code,{children:"address"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"$file(<path>)"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:'"$file(./payload.bin)"'})}),"\n",(0,s.jsxs)(n.td,{align:"left",children:["Reads the raw binary content of a file. Used for ",(0,s.jsx)(n.code,{children:"vector"})," types."]}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"$hex(<hex_string>)"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:'"$hex(deadbeef0123)"'})}),"\n",(0,s.jsxs)(n.td,{align:"left",children:["Interprets a literal string as a hexadecimal byte sequence. Used for ",(0,s.jsx)(n.code,{children:"vector"})," types."]}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"$json(<path>#<json_path>)"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:'"$json(./cfg.json#user.id)"'})}),"\n",(0,s.jsxs)(n.td,{align:"left",children:["Parses a JSON file and extracts the value at the given path (using ",(0,s.jsx)(n.code,{children:"#"})," as a separator). The result can be a number, string, boolean, or BigInt."]}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"$exec(<cmd>[#<fmt>[#<path>]])"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"See table below."}),"\n",(0,s.jsxs)(n.td,{align:"left",children:["Executes a shell command and captures its stdout. The optional ",(0,s.jsx)(n.code,{children:"fmt"})," specifier determines how to interpret the output."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h4,{id:"exec-format-specifiers",children:[(0,s.jsx)(n.code,{children:"$exec"})," Format Specifiers",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#exec-format-specifiers",children:"#"})]}),"\n",(0,s.jsxs)(n.table,{children:["\n",(0,s.jsxs)(n.thead,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.th,{align:"left",children:"Format"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Example"}),"\n",(0,s.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.tbody,{children:["\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsxs)(n.td,{align:"left",children:[(0,s.jsx)(n.code,{children:"bin"})," (default)"]}),"\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"$exec(./gen-data)"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Treats stdout as a raw binary stream."}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"hex"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"$exec(./gen-hex#hex)"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:"Expects stdout to be a hex-encoded string."}),"\n"]}),"\n",(0,s.jsxs)(n.tr,{children:["\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"json"})}),"\n",(0,s.jsx)(n.td,{align:"left",children:(0,s.jsx)(n.code,{children:"$exec(curl api/n#json#nonce)"})}),"\n",(0,s.jsxs)(n.td,{align:"left",children:["Expects stdout to be JSON. The ",(0,s.jsx)(n.code,{children:"#"})," path is used to extract a specific value."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"7-general-schema-rules",children:["7. General Schema Rules",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#7-general-schema-rules",children:"#"})]}),"\n",(0,s.jsxs)(n.h4,{id:"field-naming-and-case-sensitivity",children:["Field Naming and Case Sensitivity",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#field-naming-and-case-sensitivity",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["All field names defined in this specification are ",(0,s.jsx)(n.strong,{children:"case-sensitive"})," and ",(0,s.jsx)(n.strong,{children:"MUST"})," be written in ",(0,s.jsx)(n.code,{children:"camelCase"}),". An LTM parsing tool must reject any manifest that uses a different case or format (e.g., ",(0,s.jsx)(n.code,{children:"snake_case"})," or ",(0,s.jsx)(n.code,{children:"kebab-case"}),") for official field names."]}),"\n",(0,s.jsxs)(n.h4,{id:"comments",children:["Comments",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#comments",children:"#"})]}),"\n",(0,s.jsxs)(n.p,{children:["JSON does not natively support comments. To allow for inline documentation, any JSON object within an LTM file may include a field with the key ",(0,s.jsx)(n.code,{children:"comment"}),". An LTM tool ",(0,s.jsx)(n.strong,{children:"MUST"})," completely ignore this field and its value during processing."]}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Example:"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "uleb": 5,\n  "comment": "Instruction ID 5 is for user registration."\n}\n'})}),"\n",(0,s.jsxs)(n.h3,{id:"8-data-type-handling",children:["8. Data Type Handling",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#8-data-type-handling",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Literals:"})," Values without placeholders are treated as literals (e.g., ",(0,s.jsx)(n.code,{children:"123"}),", ",(0,s.jsx)(n.code,{children:'"hello"'}),")."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Large Integers:"})," The JSON specification allows for numbers of arbitrary precision. However, many standard parsers (like JavaScript's native ",(0,s.jsx)(n.code,{children:"JSON.parse()"}),") will truncate large integer values, leading to silent data corruption. Therefore, it is a strict requirement that any compliant LTM implementation ",(0,s.jsx)(n.strong,{children:"MUST"})," use a parser that preserves the full precision of all numeric literals, converting them to a ",(0,s.jsx)(n.code,{children:"BigInt"})," or an equivalent lossless type. While a compliant tool must handle unquoted large numbers safely, providing them as strings (e.g., ",(0,s.jsx)(n.code,{children:'"18446744073709551615"'}),") remains a recommended best practice to ensure maximum compatibility across different platforms and tools."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Programmable Use:"})," When used as a library, an LTM build tool should provide maximum flexibility by accepting direct JavaScript types for instruction fields. This includes ",(0,s.jsx)(n.code,{children:"Uint8Array"})," for vector types, ",(0,s.jsx)(n.code,{children:"BigInt"})," for large integer types (e.g., ",(0,s.jsx)(n.code,{children:"uint64"}),", ",(0,s.jsx)(n.code,{children:"sleb"}),"), and standard ",(0,s.jsx)(n.code,{children:"Number"})," for smaller integer and float types (e.g., ",(0,s.jsx)(n.code,{children:"uint32"}),", ",(0,s.jsx)(n.code,{children:"float64"}),"). The tool is responsible for validating that a provided ",(0,s.jsx)(n.code,{children:"Number"})," is within the valid and safe range for its target SCTP type."]}),"\n"]}),"\n",(0,s.jsxs)(n.h3,{id:"full-example",children:["Full Example",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#full-example",children:"#"})]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n  "comment": "This transaction registers a new user with a specific username and ID.",\n  "sequence": 2,\n  "feePayer": "registrar",\n  "gasLimit": 500000,\n  "gasPrice": 10,\n  "outputFile": "./register-user.tx.bin",\n  "constants": {\n    "contract": "$exec(node ./get-contract-address.js#hex)",\n    "registrationId": 1\n  },\n  "signers": {\n    "registrar": {\n      "ed25519": {\n        "secretKey": "./keys/registrar.ed25519.sk"\n      },\n      "sphincs": {\n        "secretKey": "./keys/registrar.sphincs.sk",\n        "publicKey": "./keys/registrar.sphincs.pk"\n      }\n    }\n  },\n  "invocations": [\n    {\n      "targetAddress": "$const(contract)",\n      "instructions": [\n        {\n          "uleb": "$const(registrationId)",\n          "comment": "Instruction ID 1 is for registering a new user."\n        },\n        { "vector": "$json(./user-data.json#profile.username)" },\n        { "uint64": "$exec(curl http://localhost:8080/id-service#json#newId)" },\n        { "vector": "$signer(registrar.address)" }\n      ]\n    }\n  ]\n}\n'})}),"\n",(0,s.jsxs)(n.h2,{id:"rationale",children:["Rationale",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rationale",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The design of the LTM is guided by the principles of clarity, safety, and flexibility."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"JSON as a Base:"})," JSON is ubiquitous, human-readable, and supported by virtually all programming languages, making it an ideal foundation."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Declarative Approach:"})," By defining ",(0,s.jsx)(n.em,{children:"what"})," the transaction should contain rather than ",(0,s.jsx)(n.em,{children:"how"})," to build it, the manifest separates concerns. This simplifies the user's task and allows the underlying build tool to be optimized independently."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Placeholder System:"})," A simple, consistent placeholder syntax (",(0,s.jsx)(n.code,{children:"$source(...)"}),") provides powerful and explicit data sourcing capabilities. This avoids the need for complex templating languages while enabling composition from files, commands, and other data sources."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Explicit ",(0,s.jsx)(n.code,{children:"exec"})," Formatting:"]})," Requiring a format specifier for ",(0,s.jsx)(n.code,{children:"$exec"})," (e.g., ",(0,s.jsx)(n.code,{children:"#hex"}),") is a deliberate security choice. It resolves ambiguity between binary and text-based data, preventing silent data corruption and ensuring user intent is preserved."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Single-Key Instruction Objects:"})," Using ",(0,s.jsx)(n.code,{children:'{ "type": "value" }'})," for instructions is concise and less verbose than ",(0,s.jsx)(n.code,{children:'{ "type": "type", "value": "value" }'}),", making the manifest cleaner and easier to read."]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"backwards-compatibility",children:["Backwards Compatibility",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#backwards-compatibility",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"The LEA Transaction Manifest is a new, additive standard for tooling and application-layer development. It does not propose any changes to the underlying transaction format defined in LIP-7 or any other core protocol rule. Therefore, it introduces no backwards compatibility issues."}),"\n",(0,s.jsxs)(n.h2,{id:"security-considerations",children:["Security Considerations",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#security-considerations",children:"#"})]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsxs)(n.strong,{children:["Command Execution (",(0,s.jsx)(n.code,{children:"$exec"}),"):"]})," This is the most significant security consideration. An LTM build tool will execute any command specified in an ",(0,s.jsx)(n.code,{children:"$exec"})," placeholder with the permissions of the user running the tool. Users must be warned to only use LTM files from trusted sources and to only execute trusted scripts. Maliciously crafted manifests could be used to execute arbitrary commands."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Safe JSON Parsing:"})," Implementations of LTM parsers MUST use a library that can safely handle large integers (e.g., ",(0,s.jsx)(n.code,{children:"json-bigint"})," for Node.js) to prevent silent precision loss on 64-bit numbers. Parsers MUST also operate in a strict mode that rejects duplicate keys to prevent malicious or accidental parameter overrides."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"File System Access:"})," The ",(0,s.jsx)(n.code,{children:"$file"})," and ",(0,s.jsx)(n.code,{children:"$json"})," placeholders read data from the local file system. While less dangerous than command execution, users should be aware that a manifest can access any file readable by the current user."]}),"\n"]}),"\n",(0,s.jsxs)(n.h2,{id:"copyright",children:["Copyright",(0,s.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#copyright",children:"#"})]}),"\n",(0,s.jsx)(n.p,{children:"This LIP is licensed under the MIT License."})]})}function a(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,t.ah)(),e.components);return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(r,{...e})}):r(e)}let l=a;a.__RSPRESS_PAGE_META={},a.__RSPRESS_PAGE_META["lips%2FLIP-0010.md"]={toc:[{text:"Abstract",id:"abstract",depth:2},{text:"Motivation",id:"motivation",depth:2},{text:"Specification",id:"specification",depth:2},{text:"1. Top-Level Structure",id:"1-top-level-structure",depth:3},{text:"2. `signers` Object",id:"2-signers-object",depth:3},{text:"3. `constants` Object",id:"3-constants-object",depth:3},{text:"4. `invocations` Array",id:"4-invocations-array",depth:3},{text:"5. `instructions` Array",id:"5-instructions-array",depth:3},{text:"6. Placeholder Syntax for Dynamic Data",id:"6-placeholder-syntax-for-dynamic-data",depth:3},{text:"`$exec` Format Specifiers",id:"exec-format-specifiers",depth:4},{text:"7. General Schema Rules",id:"7-general-schema-rules",depth:3},{text:"Field Naming and Case Sensitivity",id:"field-naming-and-case-sensitivity",depth:4},{text:"Comments",id:"comments",depth:4},{text:"8. Data Type Handling",id:"8-data-type-handling",depth:3},{text:"Full Example",id:"full-example",depth:3},{text:"Rationale",id:"rationale",depth:2},{text:"Backwards Compatibility",id:"backwards-compatibility",depth:2},{text:"Security Considerations",id:"security-considerations",depth:2},{text:"Copyright",id:"copyright",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);