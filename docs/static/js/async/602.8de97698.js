"use strict";(self.webpackChunkrspress=self.webpackChunkrspress||[]).push([["602"],{8897:function(e,n,s){s.r(n),s.d(n,{default:()=>c});var r=s(5893),d=s(65);function i(e){let n=Object.assign({h1:"h1",code:"code",a:"a",p:"p",h2:"h2",ul:"ul",li:"li",strong:"strong",h3:"h3",pre:"pre",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h4:"h4"},(0,d.ah)(),e.components);return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.h1,{id:"lea-standard-library-stdlea",children:["Lea Standard Library (",(0,r.jsx)(n.code,{children:"stdlea"}),")",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#lea-standard-library-stdlea",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"The official standard library for developing secure and high-performance smart contracts on the Lea platform. It provides a minimal, WASM-first set of C functions and macros, designed to be lightweight, efficient, and secure by default."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"stdlea"})," replaces the standard C library with a custom implementation tailored for the WebAssembly environment, focusing on memory safety and performance."]}),"\n",(0,r.jsxs)(n.h2,{id:"features",children:["Features",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#features",children:"#"})]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"WASM Integration:"})," Macros (",(0,r.jsx)(n.code,{children:"LEA_EXPORT"}),", ",(0,r.jsx)(n.code,{children:"LEA_IMPORT"}),") for seamless interaction with the host environment."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Management:"})," A simple and efficient bump allocator (",(0,r.jsx)(n.code,{children:"malloc"}),", ",(0,r.jsx)(n.code,{children:"allocator_reset"}),"). ",(0,r.jsx)(n.code,{children:"free()"})," is disabled to prevent memory management errors."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Memory Safety:"})," Functions like ",(0,r.jsx)(n.code,{children:"memset"}),", ",(0,r.jsx)(n.code,{children:"memcpy"}),", and ",(0,r.jsx)(n.code,{children:"memmove"})," for safe memory manipulation."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"String Handling:"})," A core set of string functions (",(0,r.jsx)(n.code,{children:"strlen"}),", ",(0,r.jsx)(n.code,{children:"strcmp"}),", ",(0,r.jsx)(n.code,{children:"strcpy"}),", etc.)."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Optional Formatting:"})," Opt-in string formatting (",(0,r.jsx)(n.code,{children:"printf"}),", ",(0,r.jsx)(n.code,{children:"snprintf"}),") and logging (",(0,r.jsx)(n.code,{children:"lea_log"}),") that can be enabled for development and disabled for production to reduce binary size."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Security Hardening:"})," An optional Undefined Behavior Sanitizer (",(0,r.jsx)(n.code,{children:"UBSan"}),") to catch common programming errors at runtime."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Simplified Build System:"})," A ",(0,r.jsx)(n.code,{children:"stdlea.mk"})," file that can be included in your project's Makefile to handle all compiler flags and dependencies automatically."]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"getting-started-integrating-stdlea",children:["Getting Started: Integrating ",(0,r.jsx)(n.code,{children:"stdlea"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#getting-started-integrating-stdlea",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["To use ",(0,r.jsx)(n.code,{children:"stdlea"})," in your project, you include the ",(0,r.jsx)(n.code,{children:"stdlea.mk"})," file in your ",(0,r.jsx)(n.code,{children:"makefile"}),". This handles all the necessary compiler flags and source file includes."]}),"\n",(0,r.jsxs)(n.h3,{id:"example-makefile-for-a-smart-contract",children:["Example Makefile for a Smart Contract",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-makefile-for-a-smart-contract",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Here is an example of a ",(0,r.jsx)(n.code,{children:"makefile"})," for a simple ",(0,r.jsx)(n.code,{children:"ed25519.wasm"})," smart contract that uses ",(0,r.jsx)(n.code,{children:"stdlea"}),":"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-makefile",children:'# --- Configuration ---\n# Enable or disable optional stdlea features.\n# Set to 1 to enable, 0 to disable.\nENABLE_UBSEN := 0\nENABLE_LEA_LOG := 0\nENABLE_LEA_FMT := 0\n\n# --- Includes ---\n# Include the stdlea makefile.\n# Adjust the path based on your project structure.\ninclude ../stdlea/stdlea.mk\n\n# --- Compiler Flags ---\n# Add any additional project-specific flags.\nCFLAGS += -O3\n\n# --- Include Paths ---\nINCLUDE_PATHS := -I. -Isrc -Isrc/optional\n\n# --- Header Files ---\nED25519_HDRS = src/monocypher.h src/optional/monocypher-ed25519.h randombytes.h\nHDRS += $(ED25519_HDRS)\n\n# --- Source Files ---\nED25519_SRCS = ed25519.c src/monocypher.c src/optional/monocypher-ed25519.c\nSRCS += $(ED25519_SRCS)\n\n# --- Target ---\nTARGET := ed25519.wasm\n\n.PHONY: all clean\n\nall: $(TARGET)\n\n$(TARGET): $(SRCS) $(HDRS)\n	@echo "Compiling and linking sources to $(TARGET)..."\n	$(CC) $(CFLAGS) $(INCLUDE_PATHS) \\\n	$(SRCS) -o $@\n	@echo "Stripping custom sections..."\n	wasm-strip $@\n\nclean:\n	@echo "Removing build artifacts..."\n	rm -f $(TARGET) *.o\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"build-configuration-stdleamk",children:["Build Configuration (",(0,r.jsx)(n.code,{children:"stdlea.mk"}),")",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#build-configuration-stdleamk",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"stdlea.mk"})," file provides several variables to control the build:"]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"Variable"}),"\n",(0,r.jsx)(n.th,{children:"Description"}),"\n",(0,r.jsx)(n.th,{children:"Default"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ENABLE_LEA_LOG"})}),"\n",(0,r.jsxs)(n.td,{children:["Enables the ",(0,r.jsx)(n.code,{children:"lea_log()"})," function for printing messages to the host."]}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0"})}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ENABLE_LEA_FMT"})}),"\n",(0,r.jsxs)(n.td,{children:["Enables the ",(0,r.jsx)(n.code,{children:"printf()"})," and ",(0,r.jsx)(n.code,{children:"snprintf()"})," functions for string formatting."]}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0"})}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ENABLE_UBSEN"})}),"\n",(0,r.jsx)(n.td,{children:"Enables the Undefined Behavior Sanitizer (UBSan) for runtime checks. This increases binary size and impacts performance."}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"0"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h2,{id:"api-reference",children:["API Reference",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#api-reference",children:"#"})]}),"\n",(0,r.jsxs)(n.h3,{id:"stdleah",children:[(0,r.jsx)(n.code,{children:"stdlea.h"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stdleah",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Core macros and functions for interacting with the Lea environment."}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"Function/Macro"}),"\n",(0,r.jsx)(n.th,{children:"Description"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LEA_EXPORT(FUNC_NAME)"})}),"\n",(0,r.jsx)(n.td,{children:"Exports a function from the Wasm module, making it callable by the host."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LEA_IMPORT(PROGRAM_ID, FUNC_NAME)"})}),"\n",(0,r.jsx)(n.td,{children:"Imports a function from another module, allowing cross-contract calls."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LEA_ABORT()"})}),"\n",(0,r.jsx)(n.td,{children:"Immediately aborts execution and traps. Used for unrecoverable errors."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LEA_LOG(const char *msg)"})}),"\n",(0,r.jsxs)(n.td,{children:["Logs a message to the host. Only available if ",(0,r.jsx)(n.code,{children:"ENABLE_LEA_LOG"})," is ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"allocator_reset()"})}),"\n",(0,r.jsx)(n.td,{children:"Resets the heap bump allocator, clearing all previously allocated memory."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"LEA_HEAP_SIZE"})}),"\n",(0,r.jsx)(n.td,{children:"Defines the total size of the static heap (default: 1 MiB)."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"stdlibh",children:[(0,r.jsx)(n.code,{children:"stdlib.h"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stdlibh",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Memory allocation and standard utilities."}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"Function/Macro"}),"\n",(0,r.jsx)(n.th,{children:"Description"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"void *malloc(size_t size)"})}),"\n",(0,r.jsxs)(n.td,{children:["Allocates ",(0,r.jsx)(n.code,{children:"size"})," bytes from the heap using a bump allocator."]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"abort()"})}),"\n",(0,r.jsx)(n.td,{children:"Aborts program execution by causing a trap."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"free(void *p)"})}),"\n",(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.strong,{children:"Not available."})," ",(0,r.jsx)(n.code,{children:"stdlea"})," uses a bump allocator. Calling ",(0,r.jsx)(n.code,{children:"free()"})," will intentionally cause a compile-time error. Use ",(0,r.jsx)(n.code,{children:"allocator_reset()"})," instead."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"stringh",children:[(0,r.jsx)(n.code,{children:"string.h"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stringh",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Functions for memory and string manipulation."}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"Function"}),"\n",(0,r.jsx)(n.th,{children:"Description"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"void *memset(void *dest, int val, size_t len)"})}),"\n",(0,r.jsx)(n.td,{children:"Fills a block of memory with a value."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"void *memcpy(void *dest, const void *src, size_t len)"})}),"\n",(0,r.jsx)(n.td,{children:"Copies a block of memory. Does not handle overlapping memory."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"void *memmove(void *dest, const void *src, size_t len)"})}),"\n",(0,r.jsx)(n.td,{children:"Copies a block of memory. Handles overlapping memory correctly."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int memcmp(const void *s1, const void *s2, size_t n)"})}),"\n",(0,r.jsx)(n.td,{children:"Compares two blocks of memory."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"size_t strlen(const char *s)"})}),"\n",(0,r.jsx)(n.td,{children:"Calculates the length of a null-terminated string."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int strcmp(const char *s1, const char *s2)"})}),"\n",(0,r.jsx)(n.td,{children:"Compares two null-terminated strings."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"int strncmp(const char *s1, const char *s2, size_t n)"})}),"\n",(0,r.jsxs)(n.td,{children:["Compares up to ",(0,r.jsx)(n.code,{children:"n"})," characters of two strings."]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"char *strcpy(char *dest, const char *src)"})}),"\n",(0,r.jsx)(n.td,{children:"Copies a null-terminated string."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"size_t strnlen(const char *s, size_t maxlen)"})}),"\n",(0,r.jsx)(n.td,{children:"Calculates the length of a string up to a maximum size."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h3,{id:"stdioh",children:[(0,r.jsx)(n.code,{children:"stdio.h"}),(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#stdioh",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["Formatted output functions. These are only available if ",(0,r.jsx)(n.code,{children:"ENABLE_LEA_FMT"})," is set to ",(0,r.jsx)(n.code,{children:"1"}),"."]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"Function"}),"\n",(0,r.jsx)(n.th,{children:"Description"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"printf(const char *fmt, ...)"})}),"\n",(0,r.jsx)(n.td,{children:"Prints a formatted string to the host environment."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"snprintf(char *buf, size_t size, const char *fmt, ...)"})}),"\n",(0,r.jsx)(n.td,{children:"Writes a formatted string to a buffer. See format specifiers below."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"vsnprintf(char *buf, size_t size, const char *fmt, va_list args)"})}),"\n",(0,r.jsxs)(n.td,{children:["Core implementation of ",(0,r.jsx)(n.code,{children:"snprintf"})," that uses a ",(0,r.jsx)(n.code,{children:"va_list"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"format-specifiers",children:["Format Specifiers",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#format-specifiers",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"printf"})," and ",(0,r.jsx)(n.code,{children:"snprintf"})," functions in ",(0,r.jsx)(n.code,{children:"stdlea"})," support a subset of the standard C specifiers, plus some custom additions designed for smart contract development."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Standard Specifiers"})}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"Specifier"}),"\n",(0,r.jsx)(n.th,{children:"Output"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"%d"}),", ",(0,r.jsx)(n.code,{children:"%i"})]}),"\n",(0,r.jsx)(n.td,{children:"Signed decimal integer."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%u"})}),"\n",(0,r.jsx)(n.td,{children:"Unsigned decimal integer."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%x"})}),"\n",(0,r.jsx)(n.td,{children:"Unsigned hexadecimal integer (lowercase)."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%b"})}),"\n",(0,r.jsxs)(n.td,{children:["Unsigned binary integer (",(0,r.jsx)(n.strong,{children:"custom extension"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%s"})}),"\n",(0,r.jsxs)(n.td,{children:["Null-terminated string. A ",(0,r.jsx)(n.code,{children:"NULL"})," pointer is printed as ",(0,r.jsx)(n.code,{children:"(null)"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%c"})}),"\n",(0,r.jsx)(n.td,{children:"Single character."}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%%"})}),"\n",(0,r.jsxs)(n.td,{children:["A literal ",(0,r.jsx)(n.code,{children:"%"})," character."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Length Modifiers"})}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"Modifier"}),"\n",(0,r.jsx)(n.th,{children:"Type"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"h"})}),"\n",(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"short"})," or ",(0,r.jsx)(n.code,{children:"unsigned short"})]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"hh"})}),"\n",(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"signed char"})," or ",(0,r.jsx)(n.code,{children:"unsigned char"})]}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"ll"})}),"\n",(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.code,{children:"long long"})," or ",(0,r.jsx)(n.code,{children:"unsigned long long"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Arbitrary-Length Specifiers (Custom)"})}),"\n",(0,r.jsxs)(n.p,{children:["These non-standard specifiers are powerful tools for handling raw data. Each consumes two arguments from the stack: a ",(0,r.jsx)(n.code,{children:"size_t"})," length, followed by a pointer."]}),"\n",(0,r.jsxs)(n.table,{children:["\n",(0,r.jsxs)(n.thead,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.th,{children:"Specifier"}),"\n",(0,r.jsx)(n.th,{children:"Description"}),"\n",(0,r.jsx)(n.th,{children:"Arguments"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.tbody,{children:["\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%*x"})}),"\n",(0,r.jsx)(n.td,{children:"Hex blob"}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"(size_t, const unsigned char*)"})}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%*b"})}),"\n",(0,r.jsx)(n.td,{children:"Binary blob"}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"(size_t, const unsigned char*)"})}),"\n"]}),"\n",(0,r.jsxs)(n.tr,{children:["\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"%*s"})}),"\n",(0,r.jsx)(n.td,{children:"Sized string (can be used for non-null-terminated strings)"}),"\n",(0,r.jsx)(n.td,{children:(0,r.jsx)(n.code,{children:"(size_t, const char*)"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.h4,{id:"examples",children:["Examples",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#examples",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"1. Basic Formatting"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'char buffer[128];\nint value = -42;\nconst char* name = "world";\nsnprintf(buffer, sizeof(buffer), "Hello, %s! The value is %d.", name, value);\n// buffer now contains: "Hello, world! The value is -42."\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"2. Hex and Binary Formatting"})}),"\n",(0,r.jsxs)(n.p,{children:["The custom ",(0,r.jsx)(n.code,{children:"%b"})," specifier is useful for viewing flags or raw binary data."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'char buffer[128];\nunsigned int flags = 42; // 00101010 in binary\nsnprintf(buffer, sizeof(buffer), "Hex: %x, Binary: %b", flags, flags);\n// buffer now contains: "Hex: 2a, Binary: 101010"\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"3. Arbitrary-Length Hex Blob"})}),"\n",(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"%*x"})," specifier is ideal for printing transaction hashes, public keys, or other fixed-size byte arrays."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-c",children:'char buffer[128];\nunsigned char tx_hash[4] = {0xDE, 0xAD, 0xBE, 0xEF};\nsnprintf(buffer, sizeof(buffer), "Transaction ID: %*x", sizeof(tx_hash), tx_hash);\n// buffer now contains: "Transaction ID: deadbeef"\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"author",children:["Author",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#author",children:"#"})]}),"\n",(0,r.jsx)(n.p,{children:"Developed by Allwin Ketnawang."}),"\n",(0,r.jsxs)(n.h2,{id:"license",children:["License",(0,r.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#license",children:"#"})]}),"\n",(0,r.jsxs)(n.p,{children:["This project is licensed under the MIT License. See the ",(0,r.jsx)(n.a,{href:"/LICENSE",children:"LICENSE"})," file for details."]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(i,{...e})}):i(e)}let c=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["development%2Fgenerated%2Fstdlea.md"]={toc:[{text:"Features",id:"features",depth:2},{text:"Getting Started: Integrating `stdlea`",id:"getting-started-integrating-stdlea",depth:2},{text:"Example Makefile for a Smart Contract",id:"example-makefile-for-a-smart-contract",depth:3},{text:"Build Configuration (`stdlea.mk`)",id:"build-configuration-stdleamk",depth:2},{text:"API Reference",id:"api-reference",depth:2},{text:"`stdlea.h`",id:"stdleah",depth:3},{text:"`stdlib.h`",id:"stdlibh",depth:3},{text:"`string.h`",id:"stringh",depth:3},{text:"`stdio.h`",id:"stdioh",depth:3},{text:"Format Specifiers",id:"format-specifiers",depth:4},{text:"Examples",id:"examples",depth:4},{text:"Author",id:"author",depth:2},{text:"License",id:"license",depth:2}],title:"Lea Standard Library (`stdlea`)",headingTitle:"Lea Standard Library (`stdlea`)",frontmatter:{title:"Lea Standard Library (`stdlea`)"}}}}]);