"use strict";(self.webpackChunkrspress=self.webpackChunkrspress||[]).push([["985"],{5259:function(e,n,i){i.r(n),i.d(n,{default:()=>r});var l=i(5893),d=i(65);function s(e){let n=Object.assign({ul:"ul",li:"li",strong:"strong",h2:"h2",a:"a",p:"p",code:"code",ol:"ol",hr:"hr",h3:"h3",table:"table",thead:"thead",tr:"tr",th:"th",tbody:"tbody",td:"td",h4:"h4",em:"em"},(0,d.ah)(),e.components);return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"LIP: 1"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Layer: Core Encoding"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Title: Extend Tag 10 for Sub-Typed Data (IxData Field)"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Author: Allwin Ketnawang"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Created: 2025-04-27"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Superseded-By: 6"})}),"\n",(0,l.jsx)(n.li,{children:(0,l.jsx)(n.strong,{children:"Status: Replaced"})}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"abstract",children:["Abstract",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#abstract",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["This LIP proposes replacing the original CTE v1.0 Tag ",(0,l.jsx)(n.code,{children:"10"}),' "Index Reference" field with a more versatile structure named the "Index and Extended Data Field" (or "IxData Field" for short). This new structure utilizes the previously reserved bits 1-0 of the header byte to introduce four sub-types, enabling the efficient encoding of: legacy 4-bit indices, standard variable-length integers (ULEB128/SLEB128), common fixed-size data types (integers, floats), and single-byte constants (including booleans). This enhances the expressiveness and efficiency of the CTE format.']}),"\n",(0,l.jsxs)(n.h2,{id:"motivation",children:["Motivation",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#motivation",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["The original CTE v1.0 specification defined the Tag ",(0,l.jsx)(n.code,{children:"10"})," field solely as a 1-byte reference containing a 4-bit index (0-15) into preceding key or signature lists. While useful, this is limiting. Applications built on CTE often require encoding other fundamental data types compactly, such as:"]}),"\n",(0,l.jsxs)(n.ol,{children:["\n",(0,l.jsx)(n.li,{children:"Integers larger than 15 or needing variable-length encoding for efficiency."}),"\n",(0,l.jsx)(n.li,{children:"Signed integers."}),"\n",(0,l.jsxs)(n.li,{children:["Standard fixed-size types like ",(0,l.jsx)(n.code,{children:"int32"}),", ",(0,l.jsx)(n.code,{children:"uint64"}),", ",(0,l.jsx)(n.code,{children:"float"}),", and ",(0,l.jsx)(n.code,{children:"double"})," without the overhead of the generic ",(0,l.jsx)(n.code,{children:"Command Data"})," field."]}),"\n",(0,l.jsxs)(n.li,{children:["Atomic boolean values (",(0,l.jsx)(n.code,{children:"true"}),"/",(0,l.jsx)(n.code,{children:"false"}),") or other single-byte markers (like ",(0,l.jsx)(n.code,{children:"null"}),") in a highly compact, unambiguous way."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["This proposal addresses these needs by repurposing the Tag ",(0,l.jsx)(n.code,{children:"10"})," field. By using the two previously reserved bits (1-0) as a sub-type selector, we can introduce multiple data formats under a single tag, significantly increasing the utility and efficiency of the CTE format while maintaining partial backwards compatibility for the original index reference use case."]}),"\n",(0,l.jsxs)(n.h2,{id:"specification",children:["Specification",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#specification",children:"#"})]}),"\n",(0,l.jsx)(n.p,{children:"This LIP replaces Section 4.3 of the CTE v1.0 specification document entirely with the following:"}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h3,{id:"43-index-and-extended-data-field-ixdata-field-tag-10",children:["4.3. Index and Extended Data Field (IxData Field) (Tag ",(0,l.jsx)(n.code,{children:"10"}),")",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#43-index-and-extended-data-field-ixdata-field-tag-10",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Tag:"})," ",(0,l.jsx)(n.code,{children:"10"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Purpose:"})," Encodes different types of data including simple list indices, variable-length integers using standard encodings, standard fixed-size data types, and single-byte constants or markers."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Identification:"})," Fields of this type are identified by the Tag ",(0,l.jsx)(n.code,{children:"10"})," in bits 7-6 of the header byte. The specific interpretation and format are determined by the ",(0,l.jsx)(n.strong,{children:"Sub-Type"})," field located in bits 1-0 (",(0,l.jsx)(n.code,{children:"SS"}),") of the header byte."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"General Header Byte Structure:"}),"\n",(0,l.jsxs)(n.table,{children:["\n",(0,l.jsxs)(n.thead,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.th,{align:"left",children:"Bits"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Field"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.tbody,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"7-6"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Tag (",(0,l.jsx)(n.code,{children:"10"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Identifies this as the IxData Field family."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"5-2"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Sub-Data (",(0,l.jsx)(n.code,{children:"XXXX"}),")"]}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["4-bit value whose meaning depends on the Sub-Type (",(0,l.jsx)(n.code,{children:"SS"}),") field."]}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"1-0"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Sub-Type (",(0,l.jsx)(n.code,{children:"SS"}),")"]}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Determines the format and interpretation (",(0,l.jsx)(n.code,{children:"00"}),", ",(0,l.jsx)(n.code,{children:"01"}),", ",(0,l.jsx)(n.code,{children:"10"}),", ",(0,l.jsx)(n.code,{children:"11"}),")."]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Endianness Note:"})," Unless otherwise specified, all multi-byte numerical data within CTE v1.1 fields (including sub-types defined below and Command Data) MUST be encoded using ",(0,l.jsx)(n.strong,{children:"Little-Endian"})," byte order. LEB128 encodings follow their own standard byte order."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h4,{id:"431-sub-type-00-legacy-index-reference",children:["4.3.1. Sub-Type ",(0,l.jsx)(n.code,{children:"00"}),": Legacy Index Reference",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#431-sub-type-00-legacy-index-reference",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Sub-Type Code (",(0,l.jsx)(n.code,{children:"SS"}),"):"]})," ",(0,l.jsx)(n.code,{children:"00"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Purpose:"})," Provides a zero-based index referencing an item within the preceding ",(0,l.jsx)(n.code,{children:"Public Key List"})," (Section 4.1) or ",(0,l.jsx)(n.code,{children:"Signature List"})," (Section 4.2). The context determines which list is being referenced. This maintains compatibility with CTE v1.0."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Format:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Header Byte:"})," ",(0,l.jsx)(n.code,{children:"10 IIII 00"}),"\n",(0,l.jsxs)(n.table,{children:["\n",(0,l.jsxs)(n.thead,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.th,{align:"left",children:"Bits"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Field"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.tbody,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"7-6"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Tag (",(0,l.jsx)(n.code,{children:"10"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"IxData Field family."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"5-2"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Index (",(0,l.jsx)(n.code,{children:"IIII"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"The 4-bit index value (0-15)."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"1-0"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Sub-Type (",(0,l.jsx)(n.code,{children:"00"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Specifies Legacy Index Reference format."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Data:"})," No following data bytes."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Constraints:"})," The Index value (",(0,l.jsx)(n.code,{children:"IIII"}),") MUST correspond to a valid position within the relevant list."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Total Size:"})," 1 byte."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Reserved Values:"})," None within this sub-type."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Example (Reference Index 5):"})," Header Byte: ",(0,l.jsx)(n.code,{children:"10 0101 00"})," = ",(0,l.jsx)(n.code,{children:"0x94"})]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h4,{id:"432-sub-type-01-variable-length-encoded-integer-varint",children:["4.3.2. Sub-Type ",(0,l.jsx)(n.code,{children:"01"}),": Variable-Length Encoded Integer (Varint)",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#432-sub-type-01-variable-length-encoded-integer-varint",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Sub-Type Code (",(0,l.jsx)(n.code,{children:"SS"}),"):"]})," ",(0,l.jsx)(n.code,{children:"01"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Purpose:"})," Encodes a signed or unsigned integer value using standard variable-length encoding schemes (LEB128) or represents the value 0 directly."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Format:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Header Byte:"})," ",(0,l.jsx)(n.code,{children:"10 EEEE 01"}),"\n",(0,l.jsxs)(n.table,{children:["\n",(0,l.jsxs)(n.thead,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.th,{align:"left",children:"Bits"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Field"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.tbody,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"7-6"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Tag (",(0,l.jsx)(n.code,{children:"10"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"IxData Field family."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"5-2"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Encoding Scheme (",(0,l.jsx)(n.code,{children:"EEEE"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Specifies the encoding method or direct value (see table below)."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"1-0"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Sub-Type (",(0,l.jsx)(n.code,{children:"01"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Specifies Varint format."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Data:"})," For LEB128 schemes, followed by the bytes constituting the variable-length encoded integer according to the relevant standard. The number of data bytes is determined by the LEB128 encoding itself (via continuation bits)."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Encoding Schemes (",(0,l.jsx)(n.code,{children:"EEEE"}),"):"]}),"\n",(0,l.jsxs)(n.table,{children:["\n",(0,l.jsxs)(n.thead,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsxs)(n.th,{align:"left",children:[(0,l.jsx)(n.code,{children:"EEEE"})," (Bin)"]}),"\n",(0,l.jsxs)(n.th,{align:"left",children:[(0,l.jsx)(n.code,{children:"EEEE"})," (Dec)"]}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Header Byte (Hex)"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Encoding Scheme / Value"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Notes"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Size (Bytes)"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.tbody,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0000"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"0"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0x81"})}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Value ",(0,l.jsx)(n.code,{children:"0"})]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Represents the integer value 0 directly."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"1 (Header only)"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0001"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"1"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0x85"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"ULEB128"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Unsigned LEB128 encoded integer data follows."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"1 + Data Length"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0010"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"2"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0x89"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"SLEB128"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Signed LEB128 encoded integer data follows."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"1 + Data Length"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0011"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"3"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0x8D"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"Reserved"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"For future variable-length encoding schemes."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"-"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"(Codes 3-15 are Reserved)"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"1111"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"15"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0xBD"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"Reserved"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"For future variable-length encoding schemes."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"-"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Constraints:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsx)(n.li,{children:"Decoders MUST correctly implement ULEB128 and SLEB128 decoding."}),"\n",(0,l.jsx)(n.li,{children:"While LEB128 can encode arbitrarily large integers, implementations MAY impose practical limits based on transaction size constraints or application needs (e.g., limiting to 64-bit or 128-bit range)."}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Total Size:"})," 1 byte for value 0; ",(0,l.jsx)(n.code,{children:"1 + Length(LEB128 Data)"})," bytes otherwise."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Reserved Values:"})," Encoding scheme codes 3 through 15 are reserved."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Example 1 (Value 300 / ",(0,l.jsx)(n.code,{children:"0x12C"})," using ULEB128):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["ULEB128 requires 2 data bytes: ",(0,l.jsx)(n.code,{children:"0xAC, 0x02"}),". ",(0,l.jsx)(n.code,{children:"EEEE"})," = ",(0,l.jsx)(n.code,{children:"0001"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Header Byte: ",(0,l.jsx)(n.code,{children:"10 0001 01"})," = ",(0,l.jsx)(n.code,{children:"0x85"})]}),"\n",(0,l.jsxs)(n.li,{children:["Following Data: ",(0,l.jsx)(n.code,{children:"0xAC"}),", ",(0,l.jsx)(n.code,{children:"0x02"})]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Example 2 (Value -100 using SLEB128):"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["SLEB128 requires 2 data bytes: ",(0,l.jsx)(n.code,{children:"0x9C, 0x7F"}),". ",(0,l.jsx)(n.code,{children:"EEEE"})," = ",(0,l.jsx)(n.code,{children:"0010"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Header Byte: ",(0,l.jsx)(n.code,{children:"10 0010 01"})," = ",(0,l.jsx)(n.code,{children:"0x89"})]}),"\n",(0,l.jsxs)(n.li,{children:["Following Data: ",(0,l.jsx)(n.code,{children:"0x9C"}),", ",(0,l.jsx)(n.code,{children:"0x7F"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h4,{id:"433-sub-type-10-fixed-data-type",children:["4.3.3. Sub-Type ",(0,l.jsx)(n.code,{children:"10"}),": Fixed Data Type",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#433-sub-type-10-fixed-data-type",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Sub-Type Code (",(0,l.jsx)(n.code,{children:"SS"}),"):"]})," ",(0,l.jsx)(n.code,{children:"10"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Purpose:"})," Encodes a value belonging to a standard, fixed-size data type identified by a type code."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Format:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Header Byte:"})," ",(0,l.jsx)(n.code,{children:"10 TTTT 10"}),"\n",(0,l.jsxs)(n.table,{children:["\n",(0,l.jsxs)(n.thead,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.th,{align:"left",children:"Bits"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Field"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.tbody,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"7-6"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Tag (",(0,l.jsx)(n.code,{children:"10"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"IxData Field family."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"5-2"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Type Code (",(0,l.jsx)(n.code,{children:"TTTT"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Specifies the fixed data type (see table below)."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"1-0"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Sub-Type (",(0,l.jsx)(n.code,{children:"10"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Specifies Fixed Data Type format."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Data:"})," Followed by the number of bytes corresponding to the specified Type Code. Data is encoded in Little-Endian byte order where applicable (multi-byte integers, floats)."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Type Codes (",(0,l.jsx)(n.code,{children:"TTTT"}),"):"]}),"\n",(0,l.jsxs)(n.table,{children:["\n",(0,l.jsxs)(n.thead,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsxs)(n.th,{align:"left",children:[(0,l.jsx)(n.code,{children:"TTTT"})," (Bin)"]}),"\n",(0,l.jsxs)(n.th,{align:"left",children:[(0,l.jsx)(n.code,{children:"TTTT"})," (Dec)"]}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Data Type"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Size (Bytes)"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Notes"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.tbody,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0000"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"0"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"int8_t"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"1"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Signed 8-bit integer"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0001"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"1"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"int16_t"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"2"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Signed 16-bit integer"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0010"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"2"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"int32_t"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"4"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Signed 32-bit integer"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0011"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"3"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"int64_t"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"8"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Signed 64-bit integer"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0100"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"4"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"uint8_t"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"1"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Unsigned 8-bit integer"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0101"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"5"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"uint16_t"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"2"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Unsigned 16-bit integer"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0110"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"6"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"uint32_t"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"4"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Unsigned 32-bit integer"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0111"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"7"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"uint64_t"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"8"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Unsigned 64-bit integer"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"1000"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"8"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"float"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"4"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"IEEE 754 Single-Precision"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"1001"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"9"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"double"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"8"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"IEEE 754 Double-Precision"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"1010"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"10"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"Reserved"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"-"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"For future use"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"(Codes 10-15 are Reserved)"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"1111"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"15"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"Reserved"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"-"}),"\n",(0,l.jsx)(n.td,{align:"left",children:"For future use"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Constraints:"})," The data following the header MUST match the size and format required by the specified Type Code."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Total Size:"})," ",(0,l.jsx)(n.code,{children:"1 + Size(Type[TTTT])"})," bytes."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Reserved Values:"})," Type codes 10 through 15 are reserved."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Example (Value -100 as ",(0,l.jsx)(n.code,{children:"int16_t"}),"):"]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:["-100 is ",(0,l.jsx)(n.code,{children:"0xFF9C"})," (Little-Endian: ",(0,l.jsx)(n.code,{children:"9C FF"}),"). ",(0,l.jsx)(n.code,{children:"TTTT"})," = ",(0,l.jsx)(n.code,{children:"0001"}),"."]}),"\n",(0,l.jsxs)(n.li,{children:["Header Byte: ",(0,l.jsx)(n.code,{children:"10 0001 10"})," = ",(0,l.jsx)(n.code,{children:"0x86"})]}),"\n",(0,l.jsxs)(n.li,{children:["Following Data: ",(0,l.jsx)(n.code,{children:"0x9C"}),", ",(0,l.jsx)(n.code,{children:"0xFF"})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h4,{id:"434-sub-type-11-single-byte-constantmarker",children:["4.3.4. Sub-Type ",(0,l.jsx)(n.code,{children:"11"}),": Single-Byte Constant/Marker",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#434-sub-type-11-single-byte-constantmarker",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Sub-Type Code (",(0,l.jsx)(n.code,{children:"SS"}),"):"]})," ",(0,l.jsx)(n.code,{children:"11"})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Purpose:"})," Encodes specific predefined constant values (like boolean ",(0,l.jsx)(n.code,{children:"true"}),"/",(0,l.jsx)(n.code,{children:"false"}),") or semantic markers using only a single byte. The meaning is determined directly by the Value Code."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Format:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Header Byte:"})," ",(0,l.jsx)(n.code,{children:"10 XXXX 11"})," (The header byte ",(0,l.jsx)(n.em,{children:"is"})," the entire field)","\n",(0,l.jsxs)(n.table,{children:["\n",(0,l.jsxs)(n.thead,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.th,{align:"left",children:"Bits"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Field"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Description"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.tbody,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"7-6"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Tag (",(0,l.jsx)(n.code,{children:"10"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"IxData Field family."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"5-2"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Value Code (",(0,l.jsx)(n.code,{children:"XXXX"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Specifies the constant or marker value (0-15)."}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"1-0"}),"\n",(0,l.jsxs)(n.td,{align:"left",children:["Sub-Type (",(0,l.jsx)(n.code,{children:"11"}),")"]}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Specifies Single-Byte Constant/Marker format."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Data:"})," No following data bytes."]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Value Codes (",(0,l.jsx)(n.code,{children:"XXXX"}),"):"]}),"\n",(0,l.jsxs)(n.table,{children:["\n",(0,l.jsxs)(n.thead,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsxs)(n.th,{align:"left",children:[(0,l.jsx)(n.code,{children:"XXXX"})," (Bin)"]}),"\n",(0,l.jsxs)(n.th,{align:"left",children:[(0,l.jsx)(n.code,{children:"XXXX"})," (Dec)"]}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Header Byte (Hex)"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Defined Meaning"}),"\n",(0,l.jsx)(n.th,{align:"left",children:"Notes"}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.tbody,{children:["\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0000"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"0"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0x83"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"false"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Boolean false value"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0001"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"1"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0x87"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"true"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"Boolean true value"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0010"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"2"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0x8B"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"Reserved"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"For future use"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"..."}),"\n",(0,l.jsx)(n.td,{align:"left",children:"(Codes 2-15 are Reserved)"}),"\n"]}),"\n",(0,l.jsxs)(n.tr,{children:["\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"1111"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"15"}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.code,{children:"0xBF"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:(0,l.jsx)(n.strong,{children:"Reserved"})}),"\n",(0,l.jsx)(n.td,{align:"left",children:"e.g., For Null, Separator"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Constraints:"})," Implementations should recognize the defined constant values."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Total Size:"})," 1 byte."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Reserved Values:"})," Value codes 2 through 15 are reserved for future standard constants or markers."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Example (Representing ",(0,l.jsx)(n.code,{children:"false"}),"):"]})," The single byte ",(0,l.jsx)(n.code,{children:"10 0000 11"})," = ",(0,l.jsx)(n.code,{children:"0x83"})," is used."]}),"\n"]}),"\n",(0,l.jsx)(n.hr,{}),"\n",(0,l.jsxs)(n.h2,{id:"rationale",children:["Rationale",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#rationale",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Sub-Typing:"})," Utilizing the two previously reserved bits (1-0) of the Tag ",(0,l.jsx)(n.code,{children:"10"})," header byte allows extending functionality significantly without consuming a new top-level tag, preserving the core 2-bit tag structure of CTE."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Varint (",(0,l.jsx)(n.code,{children:"SS=01"}),"):"]})," Adopting ULEB128 and SLEB128 provides standard, efficient variable-length encodings for unsigned and signed integers, respectively. Including a direct representation for '0' (",(0,l.jsx)(n.code,{children:"EEEE=0000"}),") optimizes the most common default integer value."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Fixed Types (",(0,l.jsx)(n.code,{children:"SS=10"}),"):"]})," Directly encoding common fixed-width types (integers up to 64 bits, float, double) is often more convenient and potentially faster to decode than using variable-length encodings or the generic Command Data field for these types. Little-Endian is chosen as a common standard."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Single-Byte Constants (",(0,l.jsx)(n.code,{children:"SS=11"}),"):"]})," Allocating a dedicated sub-type for single-byte constants like ",(0,l.jsx)(n.code,{children:"true"})," and ",(0,l.jsx)(n.code,{children:"false"})," provides an unambiguous and highly efficient (1 byte) representation. This keeps the ",(0,l.jsx)(n.code,{children:"SS=10"})," (Fixed Type) logic consistent (header always implies following data) and leaves room in ",(0,l.jsx)(n.code,{children:"SS=11"})," for other markers (e.g., ",(0,l.jsx)(n.code,{children:"null"}),", separators) if needed later."]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"backwards-compatibility",children:["Backwards Compatibility",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#backwards-compatibility",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["This proposal introduces new interpretations for the Tag ",(0,l.jsx)(n.code,{children:"10"})," field based on the value of bits 1-0."]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Partially Compatible:"})," CTE processors compliant only with v1.0 will correctly interpret the ",(0,l.jsx)(n.code,{children:"Legacy Index Reference"})," (",(0,l.jsx)(n.code,{children:"SS=00"}),") sub-type, as its format (",(0,l.jsx)(n.code,{children:"10 IIII 00"}),") remains unchanged."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Incompatible:"})," V1.0 processors will ",(0,l.jsx)(n.strong,{children:"not"})," recognize or correctly decode data encoded using the new sub-types (",(0,l.jsx)(n.code,{children:"SS=01"}),", ",(0,l.jsx)(n.code,{children:"SS=10"}),", ",(0,l.jsx)(n.code,{children:"SS=11"}),"). Encountering these formats will likely lead to parsing errors or data misinterpretation."]}),"\n"]}),"\n",(0,l.jsxs)(n.p,{children:["Adoption of this LIP requires updating CTE processors to recognize and handle all four defined sub-types of the Tag ",(0,l.jsx)(n.code,{children:"10"})," IxData Field. This change effectively defines ",(0,l.jsx)(n.strong,{children:"CTE v1.1"}),"."]}),"\n",(0,l.jsxs)(n.h2,{id:"security-considerations",children:["Security Considerations",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#security-considerations",children:"#"})]}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["LEB128 Decoding (",(0,l.jsx)(n.code,{children:"SS=01"}),"):"]})," Implementations decoding ULEB128 and SLEB128 must protect against potential resource exhaustion attacks. Maliciously crafted long sequences (many bytes with continuation bits set) could cause excessive CPU usage or memory allocation during decoding. Robust decoders should enforce limits on the number of bytes read for a single LEB128 value or check the magnitude of the partially decoded value against reasonable bounds (e.g., max 128 bits, or application-specific limits) related to the overall transaction size limit."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Fixed Type Decoding (",(0,l.jsx)(n.code,{children:"SS=10"}),"):"]})," Decoders must ensure sufficient bytes are available in the input buffer before attempting to read the data associated with a fixed type to prevent buffer over-reads. The required size is known directly from the ",(0,l.jsx)(n.code,{children:"TTTT"})," code."]}),"\n"]}),"\n",(0,l.jsxs)(n.h2,{id:"copyright",children:["Copyright",(0,l.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#copyright",children:"#"})]}),"\n",(0,l.jsxs)(n.p,{children:["This LIP is licensed under the MIT License, in alignment with the main ",(0,l.jsx)(n.a,{href:"https://getlea.org",target:"_blank",rel:"noopener noreferrer",children:"LEA Project"})," License."]})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,d.ah)(),e.components);return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(s,{...e})}):s(e)}let r=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["lips%2FLIP-0001.md"]={toc:[{text:"Abstract",id:"abstract",depth:2},{text:"Motivation",id:"motivation",depth:2},{text:"Specification",id:"specification",depth:2},{text:"4.3. Index and Extended Data Field (IxData Field) (Tag `10`)",id:"43-index-and-extended-data-field-ixdata-field-tag-10",depth:3},{text:"4.3.1. Sub-Type `00`: Legacy Index Reference",id:"431-sub-type-00-legacy-index-reference",depth:4},{text:"4.3.2. Sub-Type `01`: Variable-Length Encoded Integer (Varint)",id:"432-sub-type-01-variable-length-encoded-integer-varint",depth:4},{text:"4.3.3. Sub-Type `10`: Fixed Data Type",id:"433-sub-type-10-fixed-data-type",depth:4},{text:"4.3.4. Sub-Type `11`: Single-Byte Constant/Marker",id:"434-sub-type-11-single-byte-constantmarker",depth:4},{text:"Rationale",id:"rationale",depth:2},{text:"Backwards Compatibility",id:"backwards-compatibility",depth:2},{text:"Security Considerations",id:"security-considerations",depth:2},{text:"Copyright",id:"copyright",depth:2}],title:"",headingTitle:"",frontmatter:{}}}}]);