"use strict";(self.webpackChunkrspress=self.webpackChunkrspress||[]).push([["415"],{8097:function(e,n,s){s.r(n),s.d(n,{default:()=>r});var i=s(5893),a=s(65);function d(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",hr:"hr",h3:"h3",h4:"h4",ul:"ul",li:"li",strong:"strong"},(0,a.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"ltm",children:["ltm",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ltm",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Command-line interface for building and decoding Lea Chain Transaction Manifests."}),"\n",(0,i.jsxs)(n.h1,{id:"ltm-command-line-usage",children:["LTM Command-Line Usage",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ltm-command-line-usage",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["This guide provides detailed instructions for using the ",(0,i.jsx)(n.code,{children:"ltm"})," command-line tool."]}),"\n",(0,i.jsxs)(n.h2,{id:"installation",children:["Installation",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#installation",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["For one-off commands, you can use ",(0,i.jsx)(n.code,{children:"npx"})," without any installation:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npx @leachain/ltm <command>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Alternatively, you can install it globally to use the ",(0,i.jsx)(n.code,{children:"ltm"})," command directly:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npm install -g @leachain/ltm\nltm <command>\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"commands",children:["Commands",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#commands",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["The CLI has two main commands: ",(0,i.jsx)(n.code,{children:"build"})," and ",(0,i.jsx)(n.code,{children:"decode"}),"."]}),"\n",(0,i.jsxs)(n.h3,{id:"1-build",children:["1. ",(0,i.jsx)(n.code,{children:"build"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-build",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Constructs and signs a binary transaction from a JSON-based LTM file."}),"\n",(0,i.jsxs)(n.h4,{id:"synopsis",children:["Synopsis",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#synopsis",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npx @leachain/ltm build <file_path>\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<file_path>"}),": The path to your LTM JSON file."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"description",children:["Description",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#description",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"build"})," command reads a specified LTM file, resolves all placeholders, assembles the transaction, and signs it."]}),"\n",(0,i.jsxs)(n.p,{children:["If the ",(0,i.jsx)(n.code,{children:"outputFile"})," field is present in the manifest, the binary data is written to that file. If ",(0,i.jsx)(n.code,{children:"outputFile"})," is omitted, the raw binary data is written to standard output (",(0,i.jsx)(n.code,{children:"stdout"}),"), allowing it to be piped to other tools."]}),"\n",(0,i.jsxs)(n.h4,{id:"example-1-writing-to-a-file",children:["Example 1: Writing to a File",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-1-writing-to-a-file",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"my-transaction.json"})," contains an ",(0,i.jsx)(n.code,{children:"outputFile"})," field, the output is saved to that file. This example also shows loading signers using placeholders."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "outputFile": "./my-transaction.bin",\n  "feePayer": "main",\n  "signers": {\n    "main": "$file(./main-keyset.json)",\n    "secondary": "$json(./all-my-secrets.json#wallets.secondary)"\n  },\n  ...\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Command Execution:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npx @leachain/ltm build my-transaction.json\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output (to stderr):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"[INFO] Reading LTM file: my-transaction.json\n[INFO] Building transaction...\n[PASS] Transaction successfully written to /path/to/project/my-transaction.bin (30001 bytes)\n"})}),"\n",(0,i.jsxs)(n.h4,{id:"example-2-piping-to-standard-output",children:["Example 2: Piping to Standard Output",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-2-piping-to-standard-output",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["If ",(0,i.jsx)(n.code,{children:"stdout-transaction.json"})," omits the ",(0,i.jsx)(n.code,{children:"outputFile"})," field, the output is piped to ",(0,i.jsx)(n.code,{children:"stdout"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "feePayer": "main",\n  ...\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Command Execution:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"# Pipe the binary output to another command, like a tool that broadcasts it\nnpx @leachain/ltm build stdout-transaction.json | npx @leachain/ltm decode -\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Output (to stdout):"}),"\nThe raw binary data of the transaction. (The example above shows it being piped to the ",(0,i.jsx)(n.code,{children:"decode"})," command)."]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"2-decode",children:["2. ",(0,i.jsx)(n.code,{children:"decode"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-decode",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Decodes a binary transaction into a human-readable JSON format."}),"\n",(0,i.jsxs)(n.h4,{id:"synopsis-1",children:["Synopsis",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#synopsis-1",children:"#"})]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npx @leachain/ltm decode <file_path | ->\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"<file_path>"}),": The path to the binary transaction file. Use ",(0,i.jsx)(n.code,{children:"-"})," to read from standard input (",(0,i.jsx)(n.code,{children:"stdin"}),")."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"description-1",children:["Description",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#description-1",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["This command is the reverse of ",(0,i.jsx)(n.code,{children:"build"}),". It reads a binary transaction from a file or standard input and writes the decoded JSON representation to standard output (",(0,i.jsx)(n.code,{children:"stdout"}),"). It is useful for verifying the contents of a binary transaction before broadcasting it."]}),"\n",(0,i.jsxs)(n.h4,{id:"example",children:["Example",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Command Execution:"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npx @leachain/ltm decode my-transaction.bin\n"})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Output (example format):"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'{\n  "version": 1,\n  "sequence": 1,\n  "gasLimit": 1000000,\n  "gasPrice": 1,\n  "addresses": [\n    "a1b2c3..."\n  ],\n  "invocations": [\n    {\n      "targetIndex": 0,\n      "instructions": "0c01..."\n    }\n  ],\n  "signatures": [\n    {\n      "ed25519": "d4e5f6...",\n      "sphincs": "g7h8i9..."\n    }\n  ]\n}\n'})}),"\n",(0,i.jsx)(n.hr,{})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,a.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}let r=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["tools%2Fgenerated%2Fltm.md"]={toc:[{text:"Installation",id:"installation",depth:2},{text:"Commands",id:"commands",depth:2},{text:"1. `build`",id:"1-build",depth:3},{text:"Synopsis",id:"synopsis",depth:4},{text:"Description",id:"description",depth:4},{text:"Example 1: Writing to a File",id:"example-1-writing-to-a-file",depth:4},{text:"Example 2: Piping to Standard Output",id:"example-2-piping-to-standard-output",depth:4},{text:"2. `decode`",id:"2-decode",depth:3},{text:"Synopsis",id:"synopsis-1",depth:4},{text:"Description",id:"description-1",depth:4},{text:"Example",id:"example",depth:4}],title:"LTM Command-Line Usage",headingTitle:"LTM Command-Line Usage",frontmatter:{}}}}]);