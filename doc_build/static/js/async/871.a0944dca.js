"use strict";(self.webpackChunkrspress=self.webpackChunkrspress||[]).push([["871"],{5583:function(e,n,a){a.r(n),a.d(n,{default:()=>o});var i=a(5893),r=a(65);function s(e){let n=Object.assign({h1:"h1",a:"a",p:"p",code:"code",h2:"h2",pre:"pre",hr:"hr",h3:"h3",ul:"ul",li:"li",strong:"strong",h4:"h4"},(0,r.ah)(),e.components);return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.h1,{id:"ltm",children:["ltm",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ltm",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Node.js module for programmatically building and decoding Lea Chain Transaction Manifests."}),"\n",(0,i.jsxs)(n.h1,{id:"ltm-module-usage",children:["LTM Module Usage",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#ltm-module-usage",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["This guide provides detailed instructions and examples for using the ",(0,i.jsx)(n.code,{children:"ltm"})," package as a Node.js module."]}),"\n",(0,i.jsxs)(n.h2,{id:"installation",children:["Installation",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#installation",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Install the package using npm:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"npm install @leachain/ltm\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h2,{id:"core-functions",children:["Core Functions",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#core-functions",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["The module exports two primary asynchronous functions: ",(0,i.jsx)(n.code,{children:"build"})," and ",(0,i.jsx)(n.code,{children:"decode"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { build, decode } from '@leachain/ltm';\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"1-buildltmobject",children:["1. ",(0,i.jsx)(n.code,{children:"build(ltmObject)"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#1-buildltmobject",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Programmatically constructs and signs a binary transaction from a JavaScript object."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameter"}),": ",(0,i.jsx)(n.code,{children:"ltmObject"})," (Object) - A JavaScript object that follows the LTM schema. Note: The ",(0,i.jsx)(n.code,{children:"outputFile"})," field is ignored by this function."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": A ",(0,i.jsx)(n.code,{children:"Promise"})," that resolves to a ",(0,i.jsx)(n.code,{children:"Uint8Array"})," containing the raw binary transaction data."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"important-note-on-browser-usage",children:["Important Note on Browser Usage",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#important-note-on-browser-usage",children:"#"})]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"build"})," function has limitations in a browser environment. Specifically, any LTM feature that requires file system access or command execution will not work. This includes:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"signers"})," object (which reads key files)."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"$file()"}),", ",(0,i.jsx)(n.code,{children:"$json()"}),", and ",(0,i.jsx)(n.code,{children:"$exec()"})," placeholders."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["If these features are used in a browser context, the function will throw an error. To build transactions in a browser, you must provide all data, including key material, directly within the ",(0,i.jsx)(n.code,{children:"ltmObject"}),"."]}),"\n",(0,i.jsxs)(n.h4,{id:"example-building-a-transaction-in-nodejs",children:["Example: Building a Transaction in Node.js",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-building-a-transaction-in-nodejs",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"This example demonstrates building a transaction by providing the keyset directly as a JavaScript array."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { build } from '@leachain/ltm';\nimport fs from 'fs/promises';\n\nasync function createTransaction() {\n    // Load your keyset from a file or secure storage\n    const keysetJson = await fs.readFile('./main-keyset.json', 'utf8');\n    const myKeyset = JSON.parse(keysetJson);\n\n    // Define the transaction in a JavaScript object\n    const myTransaction = {\n        feePayer: 'main',\n        sequence: 1,\n        gasLimit: 1000000,\n        gasPrice: 1,\n        signers: {\n            main: myKeyset // Provide the keyset array directly\n        },\n        invocations: [\n            {\n                targetAddress: '$signer(main.address)',\n                instructions: [\n                    { \"uint64\": \"9876543210\" },\n                    { \"vector\": Buffer.from(\"hello world\").toString('hex') }\n                ]\n            }\n        ]\n    };\n\n    try {\n        console.log('[INFO] Building transaction...');\n        const binaryTx = await build(myTransaction);\n\n        // Save the binary transaction to a file\n        const outputPath = './my-transaction.bin';\n        await fs.writeFile(outputPath, binaryTx);\n        console.log(`[PASS] Transaction built and saved to ${outputPath} (${binaryTx.byteLength} bytes)`);\n        \n        return binaryTx;\n    } catch (error) {\n        console.error(`[FAIL] Failed to build transaction: ${error.message}`);\n    }\n}\n\ncreateTransaction();\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(n.h3,{id:"2-decodebinarydata",children:["2. ",(0,i.jsx)(n.code,{children:"decode(binaryData)"}),(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#2-decodebinarydata",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"Decodes a binary transaction into a human-readable JavaScript object. This function is universal and works the same in both Node.js and browser environments."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Parameter"}),": ",(0,i.jsx)(n.code,{children:"binaryData"})," (Buffer | Uint8Array) - The binary transaction data to decode."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": A ",(0,i.jsx)(n.code,{children:"Promise"})," that resolves to a JavaScript object representing the transaction."]}),"\n"]}),"\n",(0,i.jsxs)(n.h4,{id:"example-decoding-a-transaction",children:["Example: Decoding a Transaction",(0,i.jsx)(n.a,{className:"header-anchor","aria-hidden":"true",href:"#example-decoding-a-transaction",children:"#"})]}),"\n",(0,i.jsx)(n.p,{children:"This example reads a binary transaction file and prints its decoded contents."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"import { decode } from 'ltm';\nimport fs from 'fs/promises';\n\nasync function inspectTransaction(filePath) {\n    try {\n        console.log(`[INFO] Reading binary transaction from: ${filePath}`);\n        const binaryData = await fs.readFile(filePath);\n\n        console.log('[INFO] Decoding transaction...');\n        const decodedTx = await decode(binaryData);\n\n        console.log('[PASS] Transaction decoded successfully:');\n        console.log(JSON.stringify(decodedTx, (key, value) => \n            typeof value === 'bigint' ? value.toString() : value, 2));\n        \n        return decodedTx;\n    } catch (error) {\n        console.error(`[FAIL] Failed to decode transaction: ${error.message}`);\n    }\n}\n\ninspectTransaction('./my-transaction.bin');\n"})}),"\n",(0,i.jsx)(n.hr,{})]})}function t(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:n}=Object.assign({},(0,r.ah)(),e.components);return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(s,{...e})}):s(e)}let o=t;t.__RSPRESS_PAGE_META={},t.__RSPRESS_PAGE_META["npm-module%2Fgenerated%2Fltm.md"]={toc:[{text:"Installation",id:"installation",depth:2},{text:"Core Functions",id:"core-functions",depth:2},{text:"1. `build(ltmObject)`",id:"1-buildltmobject",depth:3},{text:"Important Note on Browser Usage",id:"important-note-on-browser-usage",depth:4},{text:"Example: Building a Transaction in Node.js",id:"example-building-a-transaction-in-nodejs",depth:4},{text:"2. `decode(binaryData)`",id:"2-decodebinarydata",depth:3},{text:"Example: Decoding a Transaction",id:"example-decoding-a-transaction",depth:4}],title:"LTM Module Usage",headingTitle:"LTM Module Usage",frontmatter:{}}}}]);